<page xmlns="http://projectmallard.org/1.0/"
    type="topic"
    id="helloworld1.js">

  <info>    
    <link type="guide" xref="index#js"/>    
    <desc> 'Hello World'application with a launch icon and guidance to usage of autotools. This guide will help you create a 'Hello World' application which seamlesly will be a part of your desktop.
    </desc>    
    <revision pkgversion="0.1" version="0.1" date="2012-01-17" status="review"/>
    <credit type="author">
      <name>Susanna Huhtanen</name>
      <email>ihmis.suski@gmail.com</email>
    </credit>    
  </info>

  <title>Hello World with launcher, version .2</title>

  <synopsis>
    <p>In this guide we'll construct a small program, Hello World, using JavaScript and GTK. We'll make a launcher icon for the application and create the necessary autotools to build your project. This guide will have the following parts:</p>
      
    <list>
      <item><p> HelloWorld.js </p></item>
      <item><p> HelloWorld.desctop </p></item>
      <item><p> HelloWorld and autotools </p></item>
    </list> 
      
    <p>To do and run all the code examples yourself, you need an editor to write code in, terminal and GNOME 3. or higher installed into your computer.</p>
  </synopsis>
  
  <section id=".js">
    <title>HelloWorld.js</title>
    <p>This a basic Hello World done with JavaScript. If you are unfamiliar with JavaScript, read <link href="http://eloquentjavascript.net/contents.html">Eloquent JavaScript</link> or your preferred guide to JavaScript. </p>
      <code mime="text/javascript" style="numbered"><![CDATA[
#!/usr/bin/gjs
//The previous line is a hash bang tells how to run the script.
// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)

var Gtk, mywindow, label;

Gtk = imports.gi.Gtk;
// Initialize the gtk
Gtk.init(null, 0);
//create your window, name it and connect the x to quit function. Remember that window is a taken word
mywindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});
mywindow.title = "Hello World!";
mywindow.connect("destroy", function(){Gtk.main_quit()});
//Set some text to your window
label = new Gtk.Label({label: "Hello World"});
mywindow.add(label);
//show everything you have done
label.show();
mywindow.show();
//and run it
Gtk.main();]]></code>
  </section>
  <section id=".desktop">
    <title>HelloWorld.desktop</title>
    <p>Running applications from terminal is useful at the beginning of the application making process. To have a fully working <link href= "http://library.gnome.org/admin/system-admin-guide/stable/mimetypes-9.html.en">application integration </link>in GNOME 3. requires a desktop launcher. For this you need to create a  <code>.desktop</code> file. The .desktop file describes the application name, used icon and various integration bits. A deeper insight to  <code>.desktop</code> file can be found <link href= "http://library.gnome.org/admin/system-admin-guide/stable/menustructure-desktopentry.html.en"> here </link>. </p>
  <p>The example shows you the minimum requirements for a  <code>.desktop</code> file. </p>
  <code mime="text/desktop" style="numbered"><![CDATA[
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=HelloWorld
Comment=Say Hello
Exec=helloworld.js
Icon=application-default-icon
Terminal=false
Type=Application
StartupNotify=true
Categories=GNOME;GTK;Utility;]]></code>
  <p>Now let's go through some parts of the  <code>.desktop</code> file.</p>
  <list>
    <item><p>Line 4: Name of the application</p></item>
    <item><p>Line 5: Specifies a short description of the item</p></item>
    <item><p>Line 6: Specifies a command to execute when you choose the item from the menu. In this example exec just tels where to find the <code>helloworld.js</code> file and the file takes care of the rest.</p></item>
    <item><p>Line 8: Specifies whether the command in the Exec key runs in a terminal window.</p></item>
  </list>
  <p>If you want your  <code>.desktop</code> file to exist as a part of the system, copy your  <code>.desktop</code> file to here ~/.local/share/applications</p>
  <p> To put your application to the right category go see:<link href = "http://standards.freedesktop.org/menu-spec/latest/apa.html"> menu spec</link>.</p>
  <p>In this example I used an existing icon. For a custom icon you must store the icon in various folders in $ dir /usr/share/ . It is recommended that you supply at least 16x16 and 48x48 icons for your application. More information on icons in <link href="http://library.gnome.org/admin/system-admin-guide/stable/themes-11.html.en"> here </link> and <link href="https://live.gnome.org/GnomeGoals/AppIcon">here</link>. I will talk more about icons in the autotools section.</p>
  </section>
  
  <section id="autotools">
    <title>Hello World and autotools</title>
    <p>To make your application truly a part of the GNOME 3. system you need to install it with the help of autotools. The autotools build will install all the necessary files to all the right places. </p>
    <p>For this you need to have the following files:</p>
    <list>
      <item><p>autogen.sh</p></item>
      <item><p>Makefile.am</p></item>
      <item><p>configure.ac</p></item>
      <item><p>README</p></item>      
    </list>
    <p>autogen.sh</p>
    <code mime="text/sh" style="numbered"><![CDATA[
#!/bin/sh
# This will run autoconf, automake, etc. for us
autoreconf --force --install]]></code>
    <p>After the autogen.sh file is ready and saved run</p><screen> <output style="prompt">$                 </output><input>chmod +x autogen.sh</input></screen><p>to give the file the necessary rights to install.</p>
    <p>Makefile.am</p>
    <code mime="text/am" style="numbered"><![CDATA[
# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this
bin_SCRIPTS = helloworld.js
# List of files to be distributed
EXTRA_DIST=  \
    $(bin_SCRIPTS)

# The desktop files    
desktopdir = $(datadir)/applications
desktop_DATA = helloworld.desktop]]></code>
    <p>configure.ac</p>
    <code mime="text/ac" style="numbered"><![CDATA[
dnl This file is processed by autoconf to create a configure script
AC_INIT([Hello World], 1.0)
AM_INIT_AUTOMAKE([1.10 no-define foreign])
AC_CONFIG_FILES(Makefile)
AC_OUTPUT]]></code>
    <p>README: Information user should read first.</p>
    <p>When you have all the 3 files with correct information and rights run these commands in terminal:</p>
    <screen>
      <output style="prompt">$ </output><input>./autogen.sh</input>
      <output style="prompt">$ </output><input>./configure --prefix=/usr/local</input>
      <output style="prompt">$ </output><input>sudo make install</input>
    </screen>
    <!-- TODO: uninstall -->
    <!-- TODO: clean, the git thingie is rude -->
    <!-- TODO: How to make a custom icon with autotools -->
    <p>To use a custom icon you have to address the icon matters in Makefile.am file. </p>
    <note style="important"><p>If you want to clean autogenerated files use git clean -n and then git clean -f. THIS WILL DESTROY EVERY FILE THAT DOES NOT EXIST IN YOUR GIT! BE WARNED</p></note>
  </section>
</page>
