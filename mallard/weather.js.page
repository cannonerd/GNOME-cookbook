<page xmlns="http://projectmallard.org/1.0/"
    type="topic"
    id="weatherapp.js">

  <info>    
    <link type="guide" xref="index#js"/>    
    <desc> How to plan an application that uses asynchronous calls. Asynchronous calls will be presented through a weather application.
    </desc>    
    <revision pkgversion="0.1" version="0.1" date="2012-01-04" status="review"/>
    <credit type="author">
      <name>Susanna Huhtanen</name>
      <email>ihmis.suski@gmail.com</email>
    </credit>    
  </info>

  <title>Weather application with asynchronous calls</title>  
  <synopsis>
    <p>In this guide well construct a weather application using asynchronous calls. Weather information in this example is fetched from geonames.org and the application is using the ICAO codes to place your weather request. In this guide we we'll go through the following parts:</p>
      
    <list>
      <item><p> planning ui</p></item>
      <item><p> weatherapp.js</p></item>
      <item><p> geonames.js </p></item>
      <item><p> Asynchronous calls</p></item>
      <item><p> Autotools</p></item>
    </list> 
      
    <p>To write and run all the code examples yourself, you need an editor to write code in, terminal and GNOME 3. or higher installed into your computer.</p>
  </synopsis>
  
  <section id ="planningUi">
  <title> Planning the UI</title>
  <p> Structuring an application means you will be using GTK+. The most important thing is to remember that the main window will only accept 1 widget, so you must plan your structure accordingly (this example is using Gtk.Boxes). When starting out with the structure it is useful to first draw to paper the main window and the first Gtk.Box (the one widget) it contains. Inside that box you can put multiple widgets (boxes, labels, entry's..). Vertical box arranges only horizontal boxes in the right order and vice versa. For more information visit <link href="http://developer.gnome.org/gtk3/stable/gtkobjects.html"> the GTK+ widgets and objects page</link>.</p>
  </section>
  
  <section id ="weatherapp.js">
  <title>Weatherapp.js</title>
  <p> Weatherapp.js file looks like this:</p>
  <code mime="text/javascript" style="numbered"><![CDATA[
#!/usr/bin/gjs
//The previous line is a hash bang tells how to run the script.
// Note that the script has to be executable (run in terminal in the right folder: chmod +x scriptname)

var Gtk, weatherwindow, label1, label2, label3;

const WeatherService = imports.geonames;
//Bring your own library from same folder (as set in GJS_PATH). If using autotools .desktop will take care of this

Gtk = imports.gi.Gtk;
// Initialize the gtk
Gtk.init(null, 0);
//create your window, name it and connect the x to quit function. Remember that window is a taken word
weatherwindow = new Gtk.Window({type: Gtk.WindowType.TOPLEVEL});
weatherwindow.title = "Todays weather";
//Window only accepts one widget and a title. Further structure with Gtk.boxes of similar
weatherwindow.connect("destroy", function(){Gtk.main_quit()});
//We initialize the icon here, but deside the file later in geonames.js.
var weatherIcon = new Gtk.Image();

//Set some labels to your window
label1 = new Gtk.Label({label: ""});
label2 = new Gtk.Label({label: "Looking in the sky..."});   
label3 = new Gtk.Label({label: ""});
//TODO: rethink the boxes
var weather_box = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});
weatherwindow.add(weather_box);

var icao_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 0});
var labelicon_box = new Gtk.Box ({orientation: Gtk.Orientation.HORIZONTAL, spacing: 0});
weather_box.add(icao_box);
weather_box.add(labelicon_box);
var entry = new Gtk.Entry();
entry.set_width_chars(5);
var label4 = new Gtk.Label({label: "Enter ICAO station for weather: "});
var button1 = new Gtk.Button({label: "search!"});
icao_box.add(label4, false, false, 0);
icao_box.add(entry, false, false, 0);
icao_box.add(button1, false, false, 0);
var weather_label = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});
var weather_icon = new Gtk.Box ({orientation: Gtk.Orientation.VERTICAL, spacing: 0});
labelicon_box.pack_start(weather_label, false, false, 0);
labelicon_box.pack_start(weather_icon, true, true, 0);
weather_label.add(label1, false, false, 0);
weather_label.add(label2, false, false, 0);
weather_label.add(label3, false, false, 0);
weather_icon.add(weatherIcon, true, true, 0);
//show everything you have done
icao_box.show_all();
labelicon_box.show_all();
weather_box.show_all();
weather_label.show_all();
weather_icon.show_all();
weatherwindow.show();

//some weather

button1.connect("clicked", function(){
var station = entry.get_text();

var GeoNames = new WeatherService.GeoNames(station); //"EFHF";

GeoNames.getWeather(function(error, weather) {
  //this here works bit like signals. This code will be run when we have weather.
  if (error) { 
  //TODO: show error somehow
  return; }
  weatherIcon.file = GeoNames.getIcon(weather);
  
  label1.set_text("Temperature is " + weather.weatherObservation.temperature + " degrees.");
  if (weather.weatherObservation.weatherCondition !== "n/a"){
    label2.set_text("Looks like there is " + weather.weatherObservation.weatherCondition + " in the sky.");
    }
  else {
    label2.set_text("Looks like there is " + weather.weatherObservation.clouds + " in the sky.");
  }
  label3.set_text("Windspeed is " + weather.weatherObservation.windSpeed + " m/s")
  // ...
});

});

//and run it
Gtk.main();]]></code>
  </section>

  <section id ="Asynchronous">
  <title>Asynchronous calls</title>
  <p> With many programming languages, all operations are run synchronously - you tell the program to do something, and it will wait until that action completes before proceeding. This is however bad for
  graphical user interfaces, as then the whole application will be frozen while the program waits for
  the operation. Going asynchronous (async) helps here. With async calls, your UI won't be blocked with any requests. Async calls make your application more flexible and better equipped to handle situations when calls take more time than expected or for some reason get jammed. Async calls can be used for example file system I/O and for slower calculations in the background.   </p>
  <p>    In this example we have to get data from geonames.org so while we do that we want the rest of our program to continue. If we wouldn't get any information from geonames.org for the lack of internet connection and this would be a synhronous application we would never  get to the point where our main_quit() is processed correctly and you would have to kill your application from terminal.  </p>
  </section>
  
  <section id ="geonames.js">
  <title>geonames.js</title>
  <p>The following code are the functions that are called asynchronously from weatherapp.js</p>
  <code mime="text/javascript" style="numbered"><![CDATA[
const Soup = imports.gi.Soup;
const _httpSession = new Soup.SessionAsync();
Soup.Session.prototype.add_feature.call(_httpSession, new Soup.ProxyResolverDefault());

function GeoNames(station) {
  this.station = station;
}

GeoNames.prototype = { 
  getWeather: function(callback) {
    //TODO: Change username to global username instead of personal
    var request = Soup.Message.new('GET', 'http://api.geonames.org/weatherIcaoJSON?ICAO=' + this.station + '&username=ihmissuski');
    _httpSession.queue_message(request, function(_httpSession, message) {
      if (message.status_code !== 200) {
        callback(message.status_code, null);
        return;
      }
      var weatherJSON = request.response_body.data;
      var weather = JSON.parse(weatherJSON);
      callback(null, weather);
      });
    }, 
    
  getIcon: function(weather){
    print (JSON.stringify(weather));
    switch (weather.weatherObservation.weatherCondition){
    //TODO: metar words list, try to work out the words, no one seems to know. Own metar parser on the way..
    case "drizzle":
    case "light showers rain":
    case "light rain":
      return "weather-showers-scattered.svg";
    case "rain":
      return "weather-showers.svg";
    case "light snow": 
    case "snow grains":
      return "weather-snow.svg"; 
    }
    switch (weather.weatherObservation.clouds){
      case "few clouds":
      case "scattered clouds":
        return "weather-few-clouds.svg";
      case "clear sky":
        return "weather-clear.svg"
      case "broken clouds":
      case "overcast":
        return "weather-overcast.svg";
    }
    return "weather-fog.svg";
    }
}
}  ]]></code>
  <p>Running untill you have all the autotools files ready. :</p>

  <screen> <output style="prompt">$ </output><input> GJS_PATH=`pwd` gjs weatherapp.js</input></screen>
  <p> Use this command on terminal while developing your modules. When calling your program in this manner it knows where to find your custom JSlibraries, in this case geonames.js.
  </p>
  </section>

  <section id ="autotools">
  <title>Autotools and necessary files</title>
  <p>Having more than one file in your folder makes using autotools a bit tricky. You need the .desktop file, autogen.sh, Makefile.am, configure.ac and as a new file: myapp.sh.in file. 
  </p> 
  <p>For this you need to have the following files:</p>
    <list>
      <item><p>weatherapp.desktop</p></item>
      <item><p>weatherapp.sh.in</p></item>
      <item><p>Makefile.am</p></item>
      <item><p>configure.ac</p></item>
      <item><p>autogen.sh</p></item>          
    </list>
    <p>weatherapp.desktop</p>
    <code mime="text/.desktop" style="numbered"><![CDATA[
[Desktop Entry]
Version=1.0
Encoding=UTF-8
Name=Weather app
Comment=Weather showing application
Exec=weatherapp.sh
Icon=application-default-icon
Terminal=false
Type=Application
StartupNotify=true
Categories=GNOME;GTK;Utility;]]></code>
    <p>The thing to notice in this file is that the Exec line will make this .desktop file work only after running all the makefiles.</p>

    <p>weatherapp.sh.in</p>
    <code mime="text/sh.in" style="numbered"><![CDATA[
#!/bin/sh
export GJS_PATH=@bindir@
gjs @bindir@/weatherapp.js]]></code>
    <p>This file is a template to the file Makefile will do to be run from .desktop.</p>

    <p>Makefile.am</p>
    <code mime="text/am" style="numbered"><![CDATA[
# The actual runnable program is set to the SCRIPTS primitive. Prefix bin_ tells where to copy this
bin_SCRIPTS = weatherapp.js geonames.js weatherapp.sh
# List of files to be distributed
EXTRA_DIST=  \
    $(bin_SCRIPTS) \
    $(private_icons)	\
	  $(NULL)

CLEANFILES =

# The desktop files    
desktopdir = $(datadir)/applications
desktop_DATA =weatherapp.desktop

# convenience command for doing Makefile variable substitutions in non-Makefile
# files (scripts, service files, etc.)
do_subst = sed -e 's|@abs_top_srcdir[@]|$(abs_top_srcdir)|g' \
               -e 's|@abs_top_builddir[@]|$(abs_top_builddir)|g' \
               -e 's|@localedir[@]|$(localedir)|g' \
               -e 's|@bindir[@]|$(bindir)|g' \
               -e 's|@libexecdir[@]|$(libexecdir)|g' \
	       -e 's|@pkglibdir[@]|$(pkglibdir)|g' \
	       -e 's|@pkgdatadir[@]|$(pkgdatadir)|g' \
	       -e 's|@have_libnotify[@]|$(HAVE_LIBNOTIFY)|g' \
	       -e 's|@have_libsoup[@]|$(HAVE_LIBSOUP)|g' \
	       -e 's|@have_cheese[@]|$(HAVE_CHEESE)|g'

weatherapp.sh: weatherapp.sh.in
	$(AM_V_GEN) $(do_subst) $< > $@
	chmod +x $@
	
CLEANFILES += weatherapp.sh
EXTRA_DIST += weatherapp.sh.in

#the application icon
appicondir=$(datadir)/icons/hicolor/scalable/apps
appicon_DATA=weather-icon.svg

#icons in the application
NULL =

private_icons = \
	weather-clear.svg \
  weather-few-clouds.svg \
  weather-fog.svg \
  weather-icon.svg \
  weather-overcast.svg \
  weather-showers.svg \
  weather-showers-scattered.svg \
  weather-snow.svg \
  $(NULL)
  
install-icons:
	for icon in $(private_icons); do \
		mkdir -p $(DESTDIR)$(pkgdatadir)/icons/; \
		$(INSTALL_DATA) $(srcdir)/$$icon $(DESTDIR)$(pkgdatadir)/icons/; \
	done
	
install-data-local: install-icons]]></code>
    <p>This needs a bit more explaining. Compared to the HelloWorld Makefile.am this has changed quite a bit. Lets go through all the new blocks:</p>
    <p>bin_scripts are the files that are needed to run your application. In thin case they are the first two files are the program itself and the third is the script that launches the application.</p>
    <p>EXTRA_DIST are the files that are to be distributed</p>
    <p>do_subst block is bits and pieces that need to be where they are</p>
    <p>after the comment #icons in the application there are all the icons that are used by the program. For them to be useful you need to install the icons in correct places and that is done byt the install-icons: bit</p>

    <p>configure.ac</p>
    <code mime="text/ac" style="numbered"><![CDATA[
dnl This file is processed by autoconf to create a configure script
AC_INIT([Weather App], 1.0)
AM_INIT_AUTOMAKE([1.10 no-define foreign])
AC_CONFIG_FILES(Makefile)
AC_OUTPUT]]></code>
    <p>autohen.sh</p>
    <code mime="text/sh" style="numbered"><![CDATA[
#!/bin/sh
# This will run autoconf, automake, etc. for us
autoreconf --force --install]]></code>
  </section>
  <section id="icons">
  <title>Custom icons for your application</title>
  <p>When thinking about custom icons a good rule of thumb is: do you expect to see that icon used elsewhere or is it private to your app? If the first (e.g. the icons in the desktop file that are shown by the shell) then you need /usr/share/hicolor, otherwise (e.g. the weather icons of your app) /usr/share/$application/bla/bla</p>
  <p>Using autotools you have to make some changes to your .desktop and Makefile.am files. In the desktop file you change the Icon's name  Icon=weather-icon. In the Makefile.am file you add these two lines to the end of your application #the application icon
appicondir=$(datadir)/icons/hicolor/scalable/apps
appicon_DATA=weather-icon.svg 
</p>
  </section>
</page>

